#!/usr/bin/env python

# set up parameters that we care about
PACKAGE = 'jsk_pcl_ros'

from dynamic_reconfigure.parameter_generator_catkin import *;

from math import pi

def commonParameter():
    gen = ParameterGenerator ()
    gen.add("use_range_likelihood", bool_t, 0, "", False)
    gen.add("range_likelihood_local_min_z", double_t, 0, "", 0.0, 0.0, 1.0)
    gen.add("range_likelihood_local_max_z", double_t, 0, "", 0.0, 0.0, 1.0)
    gen.add("use_occlusion_likelihood", bool_t, 0, "", False)
    gen.add("use_inside_points_distance_zero", bool_t, 0, "", False)
    gen.add("min_inliers", int_t, 0, "", 10, 0, 1000)
    gen.add("outlier_distance", double_t, 0, "", 0.1, 0.0, 1.0)
    gen.add("plane_distance_error_power", double_t, 0, "", 2, 0, 10)
    gen.add("use_support_plane_angular_likelihood", bool_t, 0, "", False)
    gen.add("support_plane_angular_likelihood_weight_power", double_t, 0, "", 1.0, 0.0, 10.0)
    gen.add("use_surface_area_likelihood", bool_t, 0, "", False)
    gen.add("surface_area_error_power", double_t, 0, "", 1.0, 0.0, 10.0)
    gen.add("use_polygon_likelihood", bool_t, 0, "", False)
    gen.add("use_inliers", bool_t, 0, "", False)
    gen.add("inliers_power", double_t, 0, "", 2, 0, 10)
    gen.add("expected_density", double_t, 0, "", 0.01, 0.0, 1.0)
    return gen

model_base_tracker_gen = commonParameter()
model_base_tracker_gen.add("init_local_position_z_min", double_t, 0, "", 0.0, 0.0, 1.0)
model_base_tracker_gen.add("init_local_position_z_max", double_t, 0, "", 1.0, 0.0, 1.0)
model_base_tracker_gen.add("use_init_world_position_z_model", bool_t, 0, "", False)
model_base_tracker_gen.add("init_world_position_z_min", double_t, 0, "", 0, 0, 2.0)
model_base_tracker_gen.add("init_world_position_z_max", double_t, 0, "", 1.0, 0, 2.0)
model_base_tracker_gen.add("init_local_orientation_roll_mean", double_t, 0, "", 0.00, 0.0, pi)
model_base_tracker_gen.add("init_local_orientation_roll_variance", double_t, 0, "", 0.005, 0.0, 1.0)
model_base_tracker_gen.add("init_local_orientation_pitch_mean", double_t, 0, "", 0.00, 0.0, pi)
model_base_tracker_gen.add("init_local_orientation_pitch_variance", double_t, 0, "", 0.005, 0.0, 1.0)
model_base_tracker_gen.add("init_local_orientation_yaw_mean", double_t, 0, "", 0.0, 0.0, pi)
model_base_tracker_gen.add("init_local_orientation_yaw_variance", double_t, 0, "", 0.01, 0.0, 1.0)
model_base_tracker_gen.add("use_global_init_yaw", bool_t, 0, False)
model_base_tracker_gen.add("init_global_orientation_yaw_mean", double_t, 0, "", 0.0, 0.0, pi)
model_base_tracker_gen.add("init_global_orientation_yaw_variance", double_t, 0, "", 0.01, 0.0, 1.0)
model_base_tracker_gen.add("disable_init_roll", bool_t, 0, "", False)
model_base_tracker_gen.add("disable_init_pitch", bool_t, 0, "", False)
model_base_tracker_gen.add("particle_num", int_t, 0, "", 1000, 0, 1000000)
model_base_tracker_gen.add("step_x_variance", double_t, 0, "", 0.0001, 0.0, 1.0)
model_base_tracker_gen.add("step_y_variance", double_t, 0, "", 0.0001, 0.0, 1.0)
model_base_tracker_gen.add("step_z_variance", double_t, 0, "", 0.0001, 0.0, 1.0)
model_base_tracker_gen.add("step_roll_variance", double_t, 0, "", 0.0001, 0.0, 1.0)
model_base_tracker_gen.add("step_pitch_variance", double_t, 0, "", 0.0001, 0.0, 1.0)
model_base_tracker_gen.add("step_yaw_variance", double_t, 0, "", 0.0001, 0.0, 1.0)
model_base_tracker_gen.add("use_init_polygon_likelihood", bool_t, 0, "", False)
model_base_tracker_gen.add("fast_cloud_threshold", double_t, 0, "", 2.0, 0.0, 10.0)

if __name__ == "__main__":
    exit(model_base_tracker_gen.generate (PACKAGE, "jsk_pcl_ros", "ModelBaseTracker"))